// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/lex/jsonstrict.lex

package org.mineacademy.bfo.jsonsimple;

// See https://github.com/jflex-de/jflex/issues/222
class Yylex {

	/** This character denotes the end of file. */
	public static final int YYEOF = -1;

	/** Initial size of the lookahead buffer. */
	private static final int ZZ_BUFFERSIZE = 16384;

	// Lexical states.
	public static final int YYINITIAL = 0;
	public static final int STRING_BEGIN = 2;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 *                  at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
			0, 0, 1, 1
	};

	/**
	 * Top-level table for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

	private static final String ZZ_CMAP_TOP_PACKED_0 = "\1\0\327\u0100\10\u0200\u1020\u0100";

	private static int[] zzUnpackcmap_top() {
		final int[] result = new int[4352];
		int offset = 0;
		offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Second-level tables for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

	private static final String ZZ_CMAP_BLOCKS_PACKED_0 = "\11\0\2\1\2\0\1\1\22\0\1\1\1\0\1\2" +
			"\10\0\1\3\1\4\1\5\1\6\1\7\12\10\1\11" +
			"\6\0\4\12\1\13\1\12\24\0\1\14\1\15\1\16" +
			"\3\0\1\17\1\20\2\12\1\21\1\22\5\0\1\23" +
			"\1\0\1\24\3\0\1\25\1\26\1\27\1\30\5\0" +
			"\1\31\1\0\1\32\u0182\0\u0100\33";

	private static int[] zzUnpackcmap_blocks() {
		final int[] result = new int[768];
		int offset = 0;
		offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\2\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6" +
			"\1\7\1\10\3\1\1\11\1\12\1\13\1\14\1\15" +
			"\5\0\1\16\1\17\1\15\1\20\1\21\1\22\1\23" +
			"\1\24\1\0\1\5\1\0\1\5\4\0\1\25\1\26" +
			"\2\0\1\27";

	private static int[] zzUnpackAction() {
		final int[] result = new int[45];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\34\0\70\0\124\0\70\0\70\0\160\0\214" +
			"\0\70\0\70\0\70\0\250\0\304\0\340\0\70\0\70" +
			"\0\374\0\70\0\u0118\0\u0134\0\u0150\0\u016c\0\u0188\0\u01a4" +
			"\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\70" +
			"\0\u01c0\0\u01dc\0\u01f8\0\u01f8\0\u0214\0\u0230\0\u024c\0\u0268" +
			"\0\70\0\70\0\u0284\0\u02a0\0\70";

	private static int[] zzUnpackRowMap() {
		final int[] result = new int[45];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			final int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\3\1\4\1\5\1\3\1\6\1\7\2\3\1\10" +
			"\1\11\2\3\1\12\1\3\1\13\3\3\1\14\1\3" +
			"\1\15\2\3\1\16\1\3\1\17\1\20\1\0\2\21" +
			"\1\22\12\21\1\23\16\21\35\0\1\4\42\0\1\10" +
			"\31\0\1\24\1\0\1\10\2\0\1\25\5\0\1\25" +
			"\31\0\1\26\44\0\1\27\30\0\1\30\6\0\2\21" +
			"\1\0\12\21\1\0\16\21\2\0\1\31\4\0\1\32" +
			"\5\0\1\33\2\0\1\34\1\0\1\35\1\0\1\36" +
			"\1\37\1\0\1\40\1\41\13\0\1\42\26\0\1\43" +
			"\1\0\1\43\2\0\1\44\46\0\1\45\33\0\1\46" +
			"\40\0\1\47\13\0\1\50\1\0\2\50\3\0\4\50" +
			"\21\0\1\42\2\0\1\25\5\0\1\25\22\0\1\44" +
			"\51\0\1\47\30\0\1\51\31\0\1\52\22\0\1\53" +
			"\1\0\2\53\3\0\4\53\21\0\1\54\1\0\2\54" +
			"\3\0\4\54\21\0\1\55\1\0\2\55\3\0\4\55" +
			"\11\0";

	private static int[] zzUnpackTrans() {
		final int[] result = new int[700];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** Error code for "Unknown internal scanner error". */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	/** Error code for "could not match input". */
	private static final int ZZ_NO_MATCH = 1;
	/** Error code for "pushback value was too large". */
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/**
	 * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
	 * {@link #ZZ_PUSHBACK_2BIG} respectively.
	 */
	private static final String ZZ_ERROR_MSG[] = {
			"Unknown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\1\11\1\1\2\11\2\1\3\11\3\1\2\11" +
			"\1\1\1\11\1\1\5\0\10\11\1\0\1\1\1\0" +
			"\1\1\4\0\2\11\2\0\1\11";

	private static int[] zzUnpackAttribute() {
		final int[] result = new int[45];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** Input device. */
	private java.io.Reader zzReader;

	/** Current state of the DFA. */
	private int zzState;

	/** Current lexical state. */
	private int zzLexicalState = YYINITIAL;

	/**
	 * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
	 * string.
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** Text position at the last accepting state. */
	private int zzMarkedPos;

	/** Current text position in the buffer. */
	private int zzCurrentPos;

	/** Marks the beginning of the {@link #yytext()} string in the buffer. */
	private int zzStartRead;

	/** Marks the last character in the buffer, that has been read from input. */
	private int zzEndRead;

	/**
	 * Whether the scanner is at the end of file.
	 * @see #yyatEOF
	 */
	private boolean zzAtEOF;

	/**
	 * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
	 *
	 * <p>When a lead/high surrogate has been read from the input stream into the final
	 * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/** Number of newlines encountered up to the start of the matched text. */
	@SuppressWarnings("unused")
	private int yyline;

	/** Number of characters from the last newline up to the start of the matched text. */
	@SuppressWarnings("unused")
	private int yycolumn;

	/** Number of characters up to the start of the matched text. */
	private long yychar;

	/** Whether the scanner is currently at the beginning of a line. */
	@SuppressWarnings("unused")
	private boolean zzAtBOL = true;

	/** Whether the user-EOF-code has already been executed. */
	@SuppressWarnings("unused")
	private boolean zzEOFDone;

	/* user code: */
	private StringBuilder sb = new StringBuilder();

	long getPosition() {
		return this.yychar;
	}

	/**
	 * Creates a new scanner
	 *
	 * @param   in  the java.io.Reader to read input from.
	 */
	Yylex(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Translates raw input code points to DFA table row
	 */
	private static int zzCMap(int input) {
		final int offset = input & 255;
		return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false} iff there was new input.
	 * @exception java.io.IOException  if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (this.zzStartRead > 0) {
			this.zzEndRead += this.zzFinalHighSurrogate;
			this.zzFinalHighSurrogate = 0;
			System.arraycopy(this.zzBuffer, this.zzStartRead,
					this.zzBuffer, 0,
					this.zzEndRead - this.zzStartRead);

			/* translate stored positions */
			this.zzEndRead -= this.zzStartRead;
			this.zzCurrentPos -= this.zzStartRead;
			this.zzMarkedPos -= this.zzStartRead;
			this.zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (this.zzCurrentPos >= this.zzBuffer.length - this.zzFinalHighSurrogate) {
			/* if not: blow it up */
			final char newBuffer[] = new char[this.zzBuffer.length * 2];
			System.arraycopy(this.zzBuffer, 0, newBuffer, 0, this.zzBuffer.length);
			this.zzBuffer = newBuffer;
			this.zzEndRead += this.zzFinalHighSurrogate;
			this.zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		final int requested = this.zzBuffer.length - this.zzEndRead;
		final int numRead = this.zzReader.read(this.zzBuffer, this.zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0)
			throw new java.io.IOException(
					"Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
		if (numRead > 0) {
			this.zzEndRead += numRead;
			if (Character.isHighSurrogate(this.zzBuffer[this.zzEndRead - 1]))
				if (numRead == requested) { // We requested too few chars to encode a full Unicode character
					--this.zzEndRead;
					this.zzFinalHighSurrogate = 1;
				} else { // There is room in the buffer for at least one more char
					final int c = this.zzReader.read(); // Expecting to read a paired low surrogate char
					if (c == -1)
						return true;
					else
						this.zzBuffer[this.zzEndRead++] = (char) c;
				}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}

	/**
	 * Closes the input reader.
	 *
	 * @throws java.io.IOException if the reader could not be closed.
	 */
	public final void yyclose() throws java.io.IOException {
		this.zzAtEOF = true; // indicate end of file
		this.zzEndRead = this.zzStartRead; // invalidate buffer

		if (this.zzReader != null)
			this.zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream.
	 *
	 * <p>Does not close the old reader.
	 *
	 * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
	 * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
	 *
	 * <p>Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader The new input stream.
	 */
	public final void yyreset(java.io.Reader reader) {
		this.zzReader = reader;
		this.zzEOFDone = false;
		this.yyResetPosition();
		this.zzLexicalState = YYINITIAL;
		if (this.zzBuffer.length > ZZ_BUFFERSIZE)
			this.zzBuffer = new char[ZZ_BUFFERSIZE];
	}

	/**
	 * Resets the input position.
	 */
	private final void yyResetPosition() {
		this.zzAtBOL = true;
		this.zzAtEOF = false;
		this.zzCurrentPos = 0;
		this.zzMarkedPos = 0;
		this.zzStartRead = 0;
		this.zzEndRead = 0;
		this.zzFinalHighSurrogate = 0;
		this.yyline = 0;
		this.yycolumn = 0;
		this.yychar = 0L;
	}

	/**
	 * Returns whether the scanner has reached the end of the reader it reads from.
	 *
	 * @return whether the scanner has reached EOF.
	 */
	public final boolean yyatEOF() {
		return this.zzAtEOF;
	}

	/**
	 * Returns the current lexical state.
	 *
	 * @return the current lexical state.
	 */
	public final int yystate() {
		return this.zzLexicalState;
	}

	/**
	 * Enters a new lexical state.
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		this.zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 *
	 * @return the matched text.
	 */
	public final String yytext() {
		return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
	}

	/**
	 * Returns the character at the given position from the matched text.
	 *
	 * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
	 *
	 * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
	 *
	 * @return the character at {@code position}.
	 */
	public final char yycharat(int position) {
		return this.zzBuffer[this.zzStartRead + position];
	}

	/**
	 * How many characters were matched.
	 *
	 * @return the length of the matched text region.
	 */
	public final int yylength() {
		return this.zzMarkedPos - this.zzStartRead;
	}

	/**
	 * Reports an error that occurred while scanning.
	 *
	 * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen".
	 *
	 * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
	 * scanner etc.).
	 *
	 * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
	 *
	 * @param errorCode the code of the error message to display.
	 */
	private static void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (final ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * <p>They will be read again by then next call of the scanning method.
	 *
	 * @param number the number of characters to be read again.
	 */
	public void yypushback(int number) {
		if (number > this.yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		this.zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is encountered
	 * or an I/O-Error occurs.
	 *
	 * @return the next token.
	 * @throws JSONParseException if any I/O-Error occurs.
	 * @throws java.io.IOException
	 */
	public Yytoken yylex() throws java.io.IOException, JSONParseException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = this.zzEndRead;
		char[] zzBufferL = this.zzBuffer;

		final int[] zzTransL = ZZ_TRANS;
		final int[] zzRowMapL = ZZ_ROWMAP;
		final int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = this.zzMarkedPos;

			this.yychar += zzMarkedPosL - this.zzStartRead;

			zzAction = -1;

			zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;

			this.zzState = ZZ_LEXSTATE[this.zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[this.zzState];
			if ((zzAttributes & 1) == 1)
				zzAction = this.zzState;

			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (this.zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						this.zzCurrentPos = zzCurrentPosL;
						this.zzMarkedPos = zzMarkedPosL;
						final boolean eof = this.zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = this.zzCurrentPos;
						zzMarkedPosL = this.zzMarkedPos;
						zzBufferL = this.zzBuffer;
						zzEndReadL = this.zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					final int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMap(zzInput)];
					if (zzNext == -1)
						break zzForAction;
					this.zzState = zzNext;

					zzAttributes = zzAttrL[this.zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = this.zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			this.zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && this.zzStartRead == this.zzCurrentPos) {
				this.zzAtEOF = true;
				return null;
			} else
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1: {
						throw new JSONParseException(this.yychar, JSONParseException.Problems.UNEXPECTED_CHARACTER, String.valueOf(this.yycharat(0)));
					}
					// fall through
					case 24:
						break;
					case 2: {
					}
					// fall through
					case 25:
						break;
					case 3: {
						this.sb = null;
						this.sb = new StringBuilder();
						this.yybegin(STRING_BEGIN);
					}
					// fall through
					case 26:
						break;
					case 4: {
						return new Yytoken(Yytoken.Types.COMMA, null);
					}
					// fall through
					case 27:
						break;
					case 5: {
						final java.math.BigDecimal val = new java.math.BigDecimal(this.yytext());
						return new Yytoken(Yytoken.Types.DATUM, val);
					}
					// fall through
					case 28:
						break;
					case 6: {
						return new Yytoken(Yytoken.Types.COLON, null);
					}
					// fall through
					case 29:
						break;
					case 7: {
						return new Yytoken(Yytoken.Types.LEFT_SQUARE, null);
					}
					// fall through
					case 30:
						break;
					case 8: {
						return new Yytoken(Yytoken.Types.RIGHT_SQUARE, null);
					}
					// fall through
					case 31:
						break;
					case 9: {
						return new Yytoken(Yytoken.Types.LEFT_BRACE, null);
					}
					// fall through
					case 32:
						break;
					case 10: {
						return new Yytoken(Yytoken.Types.RIGHT_BRACE, null);
					}
					// fall through
					case 33:
						break;
					case 11: {
						this.sb.append(this.yytext());
					}
					// fall through
					case 34:
						break;
					case 12: {
						this.yybegin(YYINITIAL);
						return new Yytoken(Yytoken.Types.DATUM, this.sb.toString());
					}
					// fall through
					case 35:
						break;
					case 13: {
						this.sb.append('\\');
					}
					// fall through
					case 36:
						break;
					case 14: {
						this.sb.append('"');
					}
					// fall through
					case 37:
						break;
					case 15: {
						this.sb.append('/');
					}
					// fall through
					case 38:
						break;
					case 16: {
						this.sb.append('\b');
					}
					// fall through
					case 39:
						break;
					case 17: {
						this.sb.append('\f');
					}
					// fall through
					case 40:
						break;
					case 18: {
						this.sb.append('\n');
					}
					// fall through
					case 41:
						break;
					case 19: {
						this.sb.append('\r');
					}
					// fall through
					case 42:
						break;
					case 20: {
						this.sb.append('\t');
					}
					// fall through
					case 43:
						break;
					case 21: {
						return new Yytoken(Yytoken.Types.DATUM, null);
					}
					// fall through
					case 44:
						break;
					case 22: {
						final Boolean val = Boolean.valueOf(this.yytext());
						return new Yytoken(Yytoken.Types.DATUM, val);
					}
					// fall through
					case 45:
						break;
					case 23: {
						try {
							final int ch = Integer.parseInt(this.yytext().substring(2), 16);
							this.sb.append((char) ch);
						} catch (final Exception e) {
							/* The lexer is broken if it can build a 4 byte character code and fail to append the character. */
							throw new JSONParseException(this.yychar, JSONParseException.Problems.UNEXPECTED_EXCEPTION, e);
						}
					}
					// fall through
					case 46:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
		}
	}

}
